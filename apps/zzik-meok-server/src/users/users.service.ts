import { Injectable, NotFoundException } from '@nestjs/common'
import { User } from './user.entity'
import { Repository } from 'typeorm'
import { InjectRepository } from '@nestjs/typeorm'

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
  ) {}

  async createUser(name: string, email: string, password: string): Promise<User> {
    const user = this.usersRepository.create({ name, email, password })
    return this.usersRepository.save(user)
  }

  async findOne(id: number): Promise<User> {
    const user = await this.usersRepository.findOneBy({ id })
    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`)
    }
    return user
  }

  async addUrlToUser(userId: number, url: string): Promise<User> {
    const user = await this.usersRepository.findOneBy({ id: userId })
    if (user) {
      user.urls.push({
        id: 0, // This will be auto-generated by the database
        url: url,
        title: '',
        description: '',
        isBookmarked: false,
        createdAt: new Date(),
        updatedAt: new Date(),
        userId: user.id,
        user: new User(),
      })
      return this.usersRepository.save(user)
    }
    throw new Error('User not found')
  }

  async getUserUrls(userId: number): Promise<string[]> {
    const user = await this.usersRepository.findOneBy({ id: userId })
    if (user) {
      return user.urls.map((urlObj) => urlObj.url)
    }
    throw new Error('User not found')
  }
}
